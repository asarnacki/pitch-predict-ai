-- =====================================================
-- Migration: Initial Schema Setup
-- Created: 2025-10-22 12:00:00 UTC
-- Description: Creates the initial database schema for Pitch Predict AI
-- 
-- Tables affected:
--   - profiles (public user data)
--   - predictions (user match predictions)
--
-- Features:
--   - Row Level Security (RLS) enabled on all tables
--   - Automatic profile creation trigger
--   - Performance indexes
--   - Cascade delete for data cleanup
-- =====================================================

-- =====================================================
-- Table: profiles
-- =====================================================
-- Stores public user data, separated from auth.users.
-- Each user in auth.users has exactly one corresponding profile.
-- This separation keeps auth data isolated from application data.
-- =====================================================

create table public.profiles (
  -- Primary key that references auth.users(id)
  -- Using the same UUID ensures 1:1 relationship
  id uuid primary key references auth.users(id) on delete cascade,
  
  -- Timestamp of when the profile was created
  -- Defaults to current time for automatic tracking
  created_at timestamptz not null default now()
);

-- Enable Row Level Security on profiles table
-- This ensures users can only access their own data
alter table public.profiles enable row level security;

-- =====================================================
-- RLS Policies: profiles (anon role)
-- =====================================================
-- Anonymous users have no access to profiles
-- All operations are blocked for unauthenticated users
-- =====================================================

create policy "Anonymous users cannot select profiles"
  on public.profiles
  for select
  to anon
  using (false);

create policy "Anonymous users cannot insert profiles"
  on public.profiles
  for insert
  to anon
  with check (false);

create policy "Anonymous users cannot update profiles"
  on public.profiles
  for update
  to anon
  using (false);

create policy "Anonymous users cannot delete profiles"
  on public.profiles
  for delete
  to anon
  using (false);

-- =====================================================
-- RLS Policies: profiles (authenticated role)
-- =====================================================
-- Authenticated users can only access their own profile
-- auth.uid() returns the current user's ID from JWT token
-- =====================================================

create policy "Users can view their own profile"
  on public.profiles
  for select
  to authenticated
  using (auth.uid() = id);

create policy "Users cannot insert profiles manually"
  on public.profiles
  for insert
  to authenticated
  with check (false);

create policy "Users can update their own profile"
  on public.profiles
  for update
  to authenticated
  using (auth.uid() = id);

create policy "Users cannot delete their own profile"
  on public.profiles
  for delete
  to authenticated
  using (false);

-- =====================================================
-- Table: predictions
-- =====================================================
-- Stores all match predictions saved by users.
-- Contains denormalized match data (team names, league, date)
-- for simplified queries and reduced complexity in MVP phase.
-- =====================================================

create table public.predictions (
  -- Auto-incrementing primary key for predictions
  id bigint primary key generated by default as identity,
  
  -- Timestamp of when the prediction was created
  created_at timestamptz not null default now(),
  
  -- Foreign key to profiles table
  -- Cascade delete ensures predictions are removed when user is deleted
  user_id uuid not null references public.profiles(id) on delete cascade,
  
  -- League name (e.g., "Premier League", "La Liga")
  league text not null,
  
  -- Match start date and time
  match_date timestamptz not null,
  
  -- Home team name (denormalized for simplicity)
  home_team text not null,
  
  -- Away team name (denormalized for simplicity)
  away_team text not null,
  
  -- Prediction result in JSON format
  -- Example: {"home": 0.5, "draw": 0.3, "away": 0.2}
  -- Using jsonb for efficient querying and flexibility
  prediction_result jsonb not null,
  
  -- Optional user note (max 500 characters)
  note varchar(500),
  
  -- Cached final match score for home team
  -- Null until match is completed
  home_score integer,
  
  -- Cached final match score for away team
  -- Null until match is completed
  away_score integer
);

-- Enable Row Level Security on predictions table
-- Users can only access their own predictions
alter table public.predictions enable row level security;

-- =====================================================
-- Index: predictions.user_id
-- =====================================================
-- Optimizes queries fetching a user's "watched matches" list
-- This is a frequently used query pattern in the application
-- =====================================================

create index predictions_user_id_idx on public.predictions(user_id);

-- =====================================================
-- RLS Policies: predictions (anon role)
-- =====================================================
-- Anonymous users have no access to predictions
-- All operations require authentication
-- =====================================================

create policy "Anonymous users cannot select predictions"
  on public.predictions
  for select
  to anon
  using (false);

create policy "Anonymous users cannot insert predictions"
  on public.predictions
  for insert
  to anon
  with check (false);

create policy "Anonymous users cannot update predictions"
  on public.predictions
  for update
  to anon
  using (false);

create policy "Anonymous users cannot delete predictions"
  on public.predictions
  for delete
  to anon
  using (false);

-- =====================================================
-- RLS Policies: predictions (authenticated role)
-- =====================================================
-- Authenticated users can perform CRUD operations
-- only on their own predictions (where user_id matches auth.uid())
-- =====================================================

create policy "Users can view their own predictions"
  on public.predictions
  for select
  to authenticated
  using (auth.uid() = user_id);

create policy "Users can insert their own predictions"
  on public.predictions
  for insert
  to authenticated
  with check (auth.uid() = user_id);

create policy "Users can update their own predictions"
  on public.predictions
  for update
  to authenticated
  using (auth.uid() = user_id);

create policy "Users can delete their own predictions"
  on public.predictions
  for delete
  to authenticated
  using (auth.uid() = user_id);

-- =====================================================
-- Function: handle_new_user
-- =====================================================
-- Automatically creates a profile entry when a new user
-- signs up via Supabase Auth.
-- This ensures data consistency between auth.users and profiles.
-- =====================================================

create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer
set search_path = public
as $$
begin
  -- Insert a new profile with the same ID as the auth user
  insert into public.profiles (id, created_at)
  values (new.id, now());
  
  return new;
end;
$$;

-- =====================================================
-- Trigger: on_auth_user_created
-- =====================================================
-- Fires after a new user is inserted into auth.users
-- Automatically creates corresponding profile entry
-- =====================================================

create trigger on_auth_user_created
  after insert on auth.users
  for each row
  execute function public.handle_new_user();

-- =====================================================
-- Comments on Tables and Columns
-- =====================================================
-- Adding PostgreSQL comments for better database documentation
-- =====================================================

comment on table public.profiles is 'Public user profiles, separated from auth.users for data isolation';
comment on column public.profiles.id is 'User ID, references auth.users(id) with 1:1 relationship';
comment on column public.profiles.created_at is 'Timestamp when the profile was created';

comment on table public.predictions is 'Match predictions saved by users with denormalized match data';
comment on column public.predictions.id is 'Auto-incrementing primary key';
comment on column public.predictions.created_at is 'Timestamp when the prediction was created';
comment on column public.predictions.user_id is 'Foreign key to profiles table';
comment on column public.predictions.league is 'League name (e.g., Premier League)';
comment on column public.predictions.match_date is 'Match start date and time';
comment on column public.predictions.home_team is 'Home team name';
comment on column public.predictions.away_team is 'Away team name';
comment on column public.predictions.prediction_result is 'Prediction probabilities in JSON format: {"home": 0.5, "draw": 0.3, "away": 0.2}';
comment on column public.predictions.note is 'Optional user note (max 500 characters)';
comment on column public.predictions.home_score is 'Cached final score for home team (null until match completed)';
comment on column public.predictions.away_score is 'Cached final score for away team (null until match completed)';

